SET SERVEROUTPUT ON;

DECLARE
    sequence_does_not_exist EXCEPTION;
    PRAGMA EXCEPTION_INIT(sequence_does_not_exist, -02289); -- Sequence does not exist
    table_does_not_exist EXCEPTION;
    PRAGMA EXCEPTION_INIT(table_does_not_exist, -00942); -- Table does not exist
BEGIN
    -- Drop sequences if they exist
    BEGIN
        EXECUTE IMMEDIATE 'DROP SEQUENCE ATTENDANCE_SEQ';
        DBMS_OUTPUT.PUT_LINE('Sequence ATTENDANCE_SEQ dropped.');
    EXCEPTION
        WHEN sequence_does_not_exist THEN
            DBMS_OUTPUT.PUT_LINE('Sequence ATTENDANCE_SEQ does not exist. Hence creating one!');
    END;

    BEGIN
        EXECUTE IMMEDIATE 'DROP SEQUENCE PAYROLL_SEQ';
        DBMS_OUTPUT.PUT_LINE('Sequence PAYROLL_SEQ dropped.');
    EXCEPTION
        WHEN sequence_does_not_exist THEN
            DBMS_OUTPUT.PUT_LINE('Sequence PAYROLL_SEQ does not exist. Hence creating one!');
    END;

    -- Create sequences
    EXECUTE IMMEDIATE 'CREATE SEQUENCE ATTENDANCE_SEQ START WITH 1 INCREMENT BY 1';
    DBMS_OUTPUT.PUT_LINE('Sequence ATTENDANCE_SEQ created.');
    EXECUTE IMMEDIATE 'CREATE SEQUENCE PAYROLL_SEQ START WITH 1 INCREMENT BY 1';
    DBMS_OUTPUT.PUT_LINE('Sequence PAYROLL_SEQ created.');

    -- Drop tables if they exist
    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE PAYROLL CASCADE CONSTRAINTS';
        DBMS_OUTPUT.PUT_LINE('Table PAYROLL dropped.');
    EXCEPTION
        WHEN table_does_not_exist THEN
            DBMS_OUTPUT.PUT_LINE('Table PAYROLL does not exist.');
    END;

    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE ATTENDANCE CASCADE CONSTRAINTS';
        DBMS_OUTPUT.PUT_LINE('Table ATTENDANCE dropped.');
    EXCEPTION
        WHEN table_does_not_exist THEN
            DBMS_OUTPUT.PUT_LINE('Table ATTENDANCE does not exist.');
    END;

    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE STUDENT_JOBS CASCADE CONSTRAINTS';
        DBMS_OUTPUT.PUT_LINE('Table STUDENT_JOBS dropped.');
    EXCEPTION
        WHEN table_does_not_exist THEN
            DBMS_OUTPUT.PUT_LINE('Table STUDENT_JOBS does not exist.');
    END;

    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE STUDENTS CASCADE CONSTRAINTS';
        DBMS_OUTPUT.PUT_LINE('Table STUDENTS dropped.');
    EXCEPTION
        WHEN table_does_not_exist THEN
            DBMS_OUTPUT.PUT_LINE('Table STUDENTS does not exist.');
    END;

    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE JOBS CASCADE CONSTRAINTS';
        DBMS_OUTPUT.PUT_LINE('Table JOBS dropped.');
    EXCEPTION
        WHEN table_does_not_exist THEN
            DBMS_OUTPUT.PUT_LINE('Table JOBS does not exist.');
    END;

    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE SUPERVISOR CASCADE CONSTRAINTS';
        DBMS_OUTPUT.PUT_LINE('Table SUPERVISOR dropped.');
    EXCEPTION
        WHEN table_does_not_exist THEN
            DBMS_OUTPUT.PUT_LINE('Table SUPERVISOR does not exist.');
    END;

    BEGIN
        EXECUTE IMMEDIATE 'DROP TABLE DEPARTMENT CASCADE CONSTRAINTS';
        DBMS_OUTPUT.PUT_LINE('Table DEPARTMENT dropped.');
    EXCEPTION
        WHEN table_does_not_exist THEN
            DBMS_OUTPUT.PUT_LINE('Table DEPARTMENT does not exist.');
    END;

    -- Create DEPARTMENT Table
    EXECUTE IMMEDIATE 'CREATE TABLE DEPARTMENT (
        DEPARTMENT_ID VARCHAR2(10 BYTE) PRIMARY KEY,
        DEPARTMENT_NAME VARCHAR2(20 BYTE),
        ADDRESS VARCHAR2(40 BYTE)
    )';
    DBMS_OUTPUT.PUT_LINE('Table DEPARTMENT created.');

    -- Create SUPERVISOR Table
    EXECUTE IMMEDIATE 'CREATE TABLE SUPERVISOR (
        EMPLOYEE_ID VARCHAR2(10 BYTE) PRIMARY KEY,
        FIRST_NAME VARCHAR2(20 BYTE),
        LAST_NAME VARCHAR2(30 BYTE),
        EMAIL VARCHAR2(30 BYTE),
        MOBILE_NUMBER NUMBER(12),
        DEPARTMENT_ID VARCHAR2(10 BYTE) NOT NULL,
        CONSTRAINT FK_SUPERVISOR_DEPARTMENT FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID)
    )';
    DBMS_OUTPUT.PUT_LINE('Table SUPERVISOR created.');

    -- Create JOBS Table
    EXECUTE IMMEDIATE 'CREATE TABLE JOBS (
        JOB_ID VARCHAR2(10 BYTE) PRIMARY KEY,
        JOB_NAME VARCHAR2(20 BYTE),
        BAND VARCHAR2(2 BYTE) CONSTRAINT CHK_BAND CHECK (BAND IN (''A'', ''B'', ''C'')),
        HOURLY_WAGE NUMBER,
        CONTRACT_START_DATE DATE,
        CONTRACT_END_DATE DATE,
        EMPLOYEE_ID VARCHAR2(10 BYTE) NOT NULL,
        CONSTRAINT FK_JOBS_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES SUPERVISOR(EMPLOYEE_ID),
        CONSTRAINT CHK_DATES CHECK (CONTRACT_END_DATE >= CONTRACT_START_DATE)
    )';
    DBMS_OUTPUT.PUT_LINE('Table JOBS created.');

    -- Create STUDENTS Table
    EXECUTE IMMEDIATE 'CREATE TABLE STUDENTS (
        NU_ID NUMBER(9) PRIMARY KEY,
        STUDENT_FIRST_NAME VARCHAR2(30 BYTE),
        STUDENT_LAST_NAME VARCHAR2(30 BYTE),
        STUDENT_EMAIL VARCHAR2(30 BYTE),
        STUDENT_MOBILE_NUMBER NUMBER(12),
        STUDENT_ADDRESS VARCHAR2(50 BYTE),
        HIRE_DATE DATE,
        BANK_ACCOUNT_NUMBER NUMBER(20)
    )';
    DBMS_OUTPUT.PUT_LINE('Table STUDENTS created.');

    -- Create STUDENT_JOBS Table
    EXECUTE IMMEDIATE 'CREATE TABLE STUDENT_JOBS (
        NU_ID NUMBER(9) NOT NULL,
        JOB_ID VARCHAR2(10 BYTE) NOT NULL,
        CONSTRAINT PK_STUDENT_JOBS PRIMARY KEY (NU_ID, JOB_ID),
        CONSTRAINT FK_STUDENT_JOBS_STUDENT FOREIGN KEY (NU_ID) REFERENCES STUDENTS(NU_ID),
        CONSTRAINT FK_STUDENT_JOBS_JOB FOREIGN KEY (JOB_ID) REFERENCES JOBS(JOB_ID)
    )';
    DBMS_OUTPUT.PUT_LINE('Table STUDENT_JOBS created.');

    -- Create ATTENDANCE Table with modified unique constraint
    EXECUTE IMMEDIATE 'CREATE TABLE ATTENDANCE (
        ATTENDANCE_ID NUMBER DEFAULT ATTENDANCE_SEQ.NEXTVAL PRIMARY KEY,
        ATTENDANCE_DATE DATE,
        LOG_IN TIMESTAMP,
        LOG_OFF TIMESTAMP,
        NU_ID NUMBER(9) NOT NULL,
        JOB_ID VARCHAR2(10 BYTE) NOT NULL,
        CONSTRAINT FK_ATTENDANCE_STUDENT_JOBS FOREIGN KEY (NU_ID, JOB_ID) REFERENCES STUDENT_JOBS(NU_ID, JOB_ID),
        CONSTRAINT UK_ATTENDANCE UNIQUE (NU_ID, JOB_ID, ATTENDANCE_DATE)
    )';
    DBMS_OUTPUT.PUT_LINE('Table ATTENDANCE created.');

    -- Create PAYROLL Table with foreign keys referencing ATTENDANCE's NU_ID, JOB_ID, and ATTENDANCE_DATE
    EXECUTE IMMEDIATE 'CREATE TABLE PAYROLL (
        PAYROLL_ID NUMBER DEFAULT PAYROLL_SEQ.NEXTVAL PRIMARY KEY,
        START_DATE DATE,
        END_DATE DATE,
        HOURS_WORKED NUMBER,
        GROSS_PAY NUMBER,
        PREV_PAYROLL_STATUS VARCHAR2(2 BYTE),
        ATTENDANCE_ID NUMBER NOT NULL,
        NU_ID NUMBER(9) NOT NULL,
        JOB_ID VARCHAR2(10 BYTE) NOT NULL,
        ATTENDANCE_DATE DATE NOT NULL,
        CONSTRAINT FK_PAYROLL_ATTENDANCE FOREIGN KEY (ATTENDANCE_ID) REFERENCES ATTENDANCE(ATTENDANCE_ID),
        CONSTRAINT FK_PAYROLL_ATTENDANCE_DETAILS FOREIGN KEY (NU_ID, JOB_ID, ATTENDANCE_DATE) REFERENCES ATTENDANCE(NU_ID, JOB_ID, ATTENDANCE_DATE)
    )';
    DBMS_OUTPUT.PUT_LINE('Table PAYROLL created.');

    DBMS_OUTPUT.PUT_LINE('All tables and sequences created successfully.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/






